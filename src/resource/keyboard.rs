use std::collections::HashMap;

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Keyboard
{
    model: Vec<HashMap<String, String>>,
    layout: Vec<HashMap<String, String>>,
    variant: Vec<HashMap<String, String>>,
    option: Vec<HashMap<String, String>>
}

impl Keyboard
{
    pub fn model_list() -> Vec<HashMap<String, String>>
    {
        let mut model = HashMap::new();
        
        model.insert(String::from("pc86"), String::from("Generic 86-key PC"));
        model.insert(String::from("pc101"), String::from("Generic 101-key PC"));
        model.insert(String::from("pc102"), String::from("Generic 102-key PC"));
        model.insert(String::from("pc104"), String::from("Generic 104-key PC"));
        model.insert(String::from("pc104alt"), String::from("Generic 104-key PC with L-shaped Enter key"));
        model.insert(String::from("pc105"), String::from("Generic 105-key PC"));
        model.insert(String::from("a4techKB21"), String::from("A4Tech KB-21"));
        model.insert(String::from("a4techKBS8"), String::from("A4Tech KBS-8"));
        model.insert(String::from("a4_rfkb23"), String::from("A4Tech Wireless Desktop RFKB-23"));
        model.insert(String::from("airkey"), String::from("Acer AirKey V"));
        model.insert(String::from("acer_c300"), String::from("Acer C300"));
        model.insert(String::from("acer_ferrari4k"), String::from("Acer Ferrari 4000"));
        model.insert(String::from("acer_laptop"), String::from("Acer laptop"));
        model.insert(String::from("scorpius"), String::from("Advance Scorpius KI"));
        model.insert(String::from("apple"), String::from("Apple"));
        model.insert(String::from("applealu_ansi"), String::from("Apple Aluminium (ANSI)"));
        model.insert(String::from("applealu_iso"), String::from("Apple Aluminium (ISO)"));
        model.insert(String::from("applealu_jis"), String::from("Apple Aluminium (JIS)"));
        model.insert(String::from("asus_laptop"), String::from("Asus laptop"));
        model.insert(String::from("azonaRF2300"), String::from("Azona RF2300 Wireless Internet"));
        model.insert(String::from("benqx"), String::from("BenQ X-Touch"));
        model.insert(String::from("benqx730"), String::from("BenQ X-Touch 730"));
        model.insert(String::from("benqx800"), String::from("BenQ X-Touch 800"));
        model.insert(String::from("brother"), String::from("Brother Internet"));
        model.insert(String::from("btc5090"), String::from("BTC 5090"));
        model.insert(String::from("btc5113rf"), String::from("BTC 5113RF Multimedia"));
        model.insert(String::from("btc5126t"), String::from("BTC 5126T"));
        model.insert(String::from("btc6301urf"), String::from("BTC 6301URF"));
        model.insert(String::from("btc9000"), String::from("BTC 9000"));
        model.insert(String::from("btc9000a"), String::from("BTC 9000A"));
        model.insert(String::from("btc9001ah"), String::from("BTC 9001AH"));
        model.insert(String::from("btc9019u"), String::from("BTC 9019U"));
        model.insert(String::from("btc9116u"), String::from("BTC 9116U Mini Wireless Internet and Gaming"));
        model.insert(String::from("cherryblue"), String::from("Cherry Blue Line CyBo@rd"));
        model.insert(String::from("cherrybluea"), String::from("Cherry Blue Line CyBo@rd (alt.)"));
        model.insert(String::from("cherrybunlim"), String::from("Cherry B.UNLIMITED"));
        model.insert(String::from("cherrycyboard"), String::from("Cherry CyBo@rd USB-Hub"));
        model.insert(String::from("cherrycmexpert"), String::from("Cherry CyMotion Expert"));
        model.insert(String::from("cymotionlinux"), String::from("Cherry CyMotion Master Linux"));
        model.insert(String::from("cherryblueb"), String::from("Cherry CyMotion Master XPress"));
        model.insert(String::from("chicony"), String::from("Chicony Internet"));
        model.insert(String::from("chicony9885"), String::from("Chicony KB-9885"));
        model.insert(String::from("chicony0108"), String::from("Chicony KU-0108"));
        model.insert(String::from("chicony0420"), String::from("Chicony KU-0420"));
        model.insert(String::from("chromebook"), String::from("Chromebook"));
        model.insert(String::from("compalfl90"), String::from("Compal FL90"));
        model.insert(String::from("armada"), String::from("Compaq Armada laptop"));
        model.insert(String::from("compaqeak8"), String::from("Compaq Easy Access"));
        model.insert(String::from("compaqik7"), String::from("Compaq Internet (7 keys)"));
        model.insert(String::from("compaqik13"), String::from("Compaq Internet (13 keys)"));
        model.insert(String::from("compaqik18"), String::from("Compaq Internet (18 keys)"));
        model.insert(String::from("ipaq"), String::from("Compaq iPaq"));
        model.insert(String::from("presario"), String::from("Compaq Presario laptop"));
        model.insert(String::from("creativedw7000"), String::from("Creative Desktop Wireless 7000"));
        model.insert(String::from("dell"), String::from("Dell"));
        model.insert(String::from("dell101"), String::from("Dell 101-key PC"));
        model.insert(String::from("latitude"), String::from("Dell Latitude laptop"));
        model.insert(String::from("inspiron"), String::from("Dell Inspiron 6000/8000 laptop"));
        model.insert(String::from("precision_m"), String::from("Dell Precision M laptop"));
        model.insert(String::from("dellm65"), String::from("Dell Precision M65 laptop"));
        model.insert(String::from("dellsk8125"), String::from("Dell SK-8125"));
        model.insert(String::from("dellsk8135"), String::from("Dell SK-8135"));
        model.insert(String::from("dellusbmm"), String::from("Dell USB Multimedia"));
        model.insert(String::from("dexxa"), String::from("Dexxa Wireless Desktop"));
        model.insert(String::from("diamond"), String::from("Diamond 9801/9802"));
        model.insert(String::from("dtk2000"), String::from("DTK2000"));
        model.insert(String::from("emachines"), String::from("eMachines m6800 laptop"));
        model.insert(String::from("ennyah_dkb1008"), String::from("Ennyah DKB-1008"));
        model.insert(String::from("everex"), String::from("Everex STEPnote"));
        model.insert(String::from("fscaa1667g"), String::from("Fujitsu-Siemens Amilo laptop"));
        model.insert(String::from("genius"), String::from("Genius Comfy KB-16M/Multimedia KWD-910"));
        model.insert(String::from("geniuscomfy"), String::from("Genius Comfy KB-12e"));
        model.insert(String::from("geniuscomfy2"), String::from("Genius Comfy KB-21e-Scroll"));
        model.insert(String::from("geniuskb19e"), String::from("Genius KB-19e NB"));
        model.insert(String::from("geniuskkb2050hs"), String::from("Genius KKB-2050HS"));
        model.insert(String::from("gyration"), String::from("Gyration"));
        model.insert(String::from("hhk"), String::from("Happy Hacking"));
        model.insert(String::from("hpi6"), String::from("Hewlett-Packard Internet"));
        model.insert(String::from("hpmini110"), String::from("Hewlett-Packard Mini 110 laptop"));
        model.insert(String::from("hpnx9020"), String::from("Hewlett-Packard nx9020"));
        model.insert(String::from("hp5xx"), String::from("Hewlett-Packard Omnibook 500"));
        model.insert(String::from("hp500fa"), String::from("Hewlett-Packard Omnibook 500 FA"));
        model.insert(String::from("hp6000"), String::from("Hewlett-Packard Omnibook 6000/6100"));
        model.insert(String::from("hpxe3gc"), String::from("Hewlett-Packard Omnibook XE3 GC"));
        model.insert(String::from("hpxe3gf"), String::from("Hewlett-Packard Omnibook XE3 GF"));
        model.insert(String::from("hpxt1000"), String::from("Hewlett-Packard Omnibook XT1000"));
        model.insert(String::from("hpdv5"), String::from("Hewlett-Packard Pavilion dv5"));
        model.insert(String::from("hpzt11xx"), String::from("Hewlett-Packard Pavilion ZT1100"));
        model.insert(String::from("hp250x"), String::from("Hewlett-Packard SK-2501 Multimedia"));
        model.insert(String::from("honeywell_euroboard"), String::from("Honeywell Euroboard"));
        model.insert(String::from("rapidaccess"), String::from("IBM Rapid Access"));
        model.insert(String::from("rapidaccess2"), String::from("IBM Rapid Access II"));
        model.insert(String::from("ibm_spacesaver"), String::from("IBM Space Saver"));
        model.insert(String::from("thinkpad"), String::from("IBM ThinkPad 560Z/600/600E/A22E"));
        model.insert(String::from("thinkpad60"), String::from("IBM ThinkPad R60/T60/R61/T61"));
        model.insert(String::from("thinkpadz60"), String::from("IBM ThinkPad Z60m/Z60t/Z61m/Z61t"));
        model.insert(String::from("flexpro"), String::from("Keytronic FlexPro"));
        model.insert(String::from("kinesis"), String::from("Kinesis"));
        model.insert(String::from("logitech_base"), String::from("Logitech"));
        model.insert(String::from("logiaccess"), String::from("Logitech Access"));
        model.insert(String::from("logicd"), String::from("Logitech Cordless Desktop"));
        model.insert(String::from("logicda"), String::from("Logitech Cordless Desktop (alt.)"));
        model.insert(String::from("logiex110"), String::from("Logitech Cordless Desktop EX110"));
        model.insert(String::from("logicd_it"), String::from("Logitech Cordless Desktop iTouch"));
        model.insert(String::from("logiclx300"), String::from("Logitech Cordless Desktop LX-300"));
        model.insert(String::from("logicd_nav"), String::from("Logitech Cordless Desktop Navigator"));
        model.insert(String::from("logicd_opt"), String::from("Logitech Cordless Desktop Optical"));
        model.insert(String::from("logidinovo"), String::from("Logitech diNovo"));
        model.insert(String::from("logidinovoedge"), String::from("Logitech diNovo Edge"));
        model.insert(String::from("logitech_g15"), String::from("Logitech G15 extra keys via G15daemon"));
        model.insert(String::from("logiik"), String::from("Logitech Internet"));
        model.insert(String::from("logii350"), String::from("Logitech Internet 350"));
        model.insert(String::from("logimel"), String::from("Logitech Internet 350"));
        model.insert(String::from("logicink"), String::from("Logitech Internet Navigator"));
        model.insert(String::from("itouch"), String::from("Logitech iTouch"));
        model.insert(String::from("logiitc"), String::from("Logitech iTouch Cordless Y-RB6"));
        model.insert(String::from("logiinkse"), String::from("Logitech iTouch Internet Navigator SE"));
        model.insert(String::from("logiinkseusb"), String::from("Logitech iTouch Internet Navigator SE USB"));
        model.insert(String::from("logiultrax"), String::from("Logitech Ultra-X"));
        model.insert(String::from("logiultraxc"), String::from("Logitech Ultra-X Cordless Media Desktop"));
        model.insert(String::from("mx1998"), String::from("Memorex MX1998"));
        model.insert(String::from("mx2500"), String::from("Memorex MX2500 EZ-Access"));
        model.insert(String::from("mx2750"), String::from("Memorex MX2750"));
        model.insert(String::from("microsoftccurve2k"), String::from("Microsoft Comfort Curve 2000"));
        model.insert(String::from("microsoftinet"), String::from("Microsoft Internet"));
        model.insert(String::from("microsoftprose"), String::from("Microsoft Internet Pro (Swedish)"));
        model.insert(String::from("microsoft"), String::from("Microsoft Natural"));
        model.insert(String::from("microsoftelite"), String::from("Microsoft Natural Elite"));
        model.insert(String::from("microsoft4000"), String::from("Microsoft Natural Ergonomic 4000"));
        model.insert(String::from("microsoft7000"), String::from("Microsoft Natural Wireless Ergonomic 7000"));
        model.insert(String::from("microsoftpro"), String::from("Microsoft Natural Pro/Internet Pro"));
        model.insert(String::from("microsoftprousb"), String::from("Microsoft Natural Pro USB/Internet Pro"));
        model.insert(String::from("microsoftprooem"), String::from("Microsoft Natural Pro OEM"));
        model.insert(String::from("microsoftoffice"), String::from("Microsoft Office Keyboard"));
        model.insert(String::from("microsoftsurface"), String::from("Microsoft Surface"));
        model.insert(String::from("microsoftmult"), String::from("Microsoft Wireless Multimedia 1.0A"));
        model.insert(String::from("sk1300"), String::from("NEC SK-1300"));
        model.insert(String::from("sk2500"), String::from("NEC SK-2500"));
        model.insert(String::from("sk6200"), String::from("NEC SK-6200"));
        model.insert(String::from("sk7100"), String::from("NEC SK-7100"));
        model.insert(String::from("omnikey101"), String::from("Northgate OmniKey 101"));
        model.insert(String::from("olpc"), String::from("OLPC"));
        model.insert(String::from("oretec"), String::from("Ortek Multimedia/Internet MCK-800"));
        model.insert(String::from("pc98"), String::from("PC-98"));
        model.insert(String::from("ppkb"), String::from("PinePhone Keyboard"));
        model.insert(String::from("propeller"), String::from("Propeller Voyager KTEZ-1000"));
        model.insert(String::from("qtronix"), String::from("QTronix Scorpius 98N+"));
        model.insert(String::from("samsung4500"), String::from("Samsung SDM 4500P"));
        model.insert(String::from("samsung4510"), String::from("Samsung SDM 4510P"));
        model.insert(String::from("sanwaskbkg3"), String::from("Sanwa Supply SKB-KG3"));
        model.insert(String::from("silvercrest"), String::from("Silvercrest Multimedia Wireless"));
        model.insert(String::from("apex300"), String::from("SteelSeries Apex 300 (Apex RAW)"));
        model.insert(String::from("sun_type6_jp"), String::from("Sun Type 6 (Japanese)"));
        model.insert(String::from("sun_type6_jp_usb"), String::from("Sun Type 6 USB (Japanese)"));
        model.insert(String::from("sun_type6_unix_usb"), String::from("Sun Type 6 USB (Unix)"));
        model.insert(String::from("sun_type6_usb"), String::from("Sun Type 6/7 USB"));
        model.insert(String::from("sun_type6_euro_usb"), String::from("Sun Type 6/7 USB (European)"));
        model.insert(String::from("sun_type7_usb"), String::from("Sun Type 7 USB"));
        model.insert(String::from("sun_type7_euro_usb"), String::from("Sun Type 7 USB (European)"));
        model.insert(String::from("sun_type7_jp_usb"), String::from("Sun Type 7 USB (Japanese)/Japanese 106-key"));
        model.insert(String::from("sun_type7_unix_usb"), String::from("Sun Type 7 USB (Unix)"));
        model.insert(String::from("sp_inet"), String::from("Super Power Multimedia"));
        model.insert(String::from("sven"), String::from("SVEN Ergonomic 2500"));
        model.insert(String::from("sven303"), String::from("SVEN Slim 303"));
        model.insert(String::from("symplon"), String::from("Symplon PaceBook tablet"));
        model.insert(String::from("targa_v811"), String::from("Targa Visionary 811"));
        model.insert(String::from("toshiba_s3000"), String::from("Toshiba Satellite S3000"));
        model.insert(String::from("teck227"), String::from("Truly Ergonomic 227"));
        model.insert(String::from("teck229"), String::from("Truly Ergonomic 229"));
        model.insert(String::from("trustda"), String::from("Trust Direct Access"));
        model.insert(String::from("trust_slimline"), String::from("Trust Slimline"));
        model.insert(String::from("trust"), String::from("Trust Wireless Classic"));
        model.insert(String::from("tm2020"), String::from("TypeMatrix EZ-Reach 2020"));
        model.insert(String::from("tm2030PS2"), String::from("TypeMatrix EZ-Reach 2030 PS2"));
        model.insert(String::from("tm2030USB"), String::from("TypeMatrix EZ-Reach 2030 USB"));
        model.insert(String::from("tm2030USB-102"), String::from("TypeMatrix EZ-Reach 2030 USB (102/105:EU mode)"));
        model.insert(String::from("tm2030USB-106"), String::from("TypeMatrix EZ-Reach 2030 USB (106:JP mode)"));
        model.insert(String::from("unitekkb1925"), String::from("Unitek KB-1925"));
        model.insert(String::from("vsonku306"), String::from("ViewSonic KU-306 Internet"));
        model.insert(String::from("winbook"), String::from("Winbook Model XP5"));
        model.insert(String::from("yahoo"), String::from("Yahoo! Internet"));

        vec![model]
    }

    pub fn model(key: &str) -> String
    {
        let models = Self::model_list();
        let mut value_model = String::new();

        for model in &models {
            if let Some(&ref value) = model.get(key) {
                value_model = value.clone();
            }else {
                value_model = String::from("Model not identified");
            }
        }

        value_model
    }

    pub fn model_json() -> String
    {
        let model = Self::model_list();
        serde_json::to_string_pretty(&model).unwrap()
    }

    pub fn layout_list() -> Vec<HashMap<String, String>>
    {
        let mut layouts = HashMap::new();

        layouts.insert(String::from("al"), String::from("Albanian"));
        layouts.insert(String::from("et"), String::from("Amharic"));
        layouts.insert(String::from("am"), String::from("Armenian"));
        layouts.insert(String::from("ara"), String::from("Arabic"));
        layouts.insert(String::from("eg"), String::from("Arabic (Egypt)"));
        layouts.insert(String::from("iq"), String::from("Arabic (Iraq)"));
        layouts.insert(String::from("ma"), String::from("Arabic (Morocco)"));
        layouts.insert(String::from("sy"), String::from("Arabic (Syria)"));
        layouts.insert(String::from("az"), String::from("Azerbaijani"));
        layouts.insert(String::from("ml"), String::from("Bambara"));
        layouts.insert(String::from("bd"), String::from("Bangla"));
        layouts.insert(String::from("by"), String::from("Belarusian"));
        layouts.insert(String::from("be"), String::from("Belgian"));
        layouts.insert(String::from("dz"), String::from("Berber (Algeria, Latin)"));
        layouts.insert(String::from("ba"), String::from("Bosnian"));
        layouts.insert(String::from("brai"), String::from("Braille"));
        layouts.insert(String::from("bg"), String::from("Bulgarian"));
        layouts.insert(String::from("mm"), String::from("Burmese"));
        layouts.insert(String::from("cn"), String::from("Chinese"));
        layouts.insert(String::from("hr"), String::from("Croatian"));
        layouts.insert(String::from("cz"), String::from("Czech"));
        layouts.insert(String::from("dk"), String::from("Danish"));
        layouts.insert(String::from("af"), String::from("Dari"));
        layouts.insert(String::from("mv"), String::from("Dhivehi"));
        layouts.insert(String::from("nl"), String::from("Dutch"));
        layouts.insert(String::from("bt"), String::from("Dzongkha"));
        layouts.insert(String::from("au"), String::from("English (Australia)"));
        layouts.insert(String::from("cm"), String::from("English (Cameroon)"));
        layouts.insert(String::from("gh"), String::from("English (Ghana)"));
        layouts.insert(String::from("nz"), String::from("English (New Zealand)"));
        layouts.insert(String::from("ng"), String::from("English (Nigeria)"));
        layouts.insert(String::from("za"), String::from("English (South Africa)"));
        layouts.insert(String::from("gb"), String::from("English (UK)"));
        layouts.insert(String::from("us"), String::from("English (US)"));
        layouts.insert(String::from("epo"), String::from("Esperanto"));
        layouts.insert(String::from("ee"), String::from("Estonian"));
        layouts.insert(String::from("fo"), String::from("Faroese"));
        layouts.insert(String::from("ph"), String::from("Filipino"));
        layouts.insert(String::from("fi"), String::from("Finnish"));
        layouts.insert(String::from("fr"), String::from("French"));
        layouts.insert(String::from("ca"), String::from("French (Canada)"));
        layouts.insert(String::from("cd"), String::from("French (Democratic Republic of the Congo)"));
        layouts.insert(String::from("tg"), String::from("French (Togo)"));
        layouts.insert(String::from("ge"), String::from("Georgian"));
        layouts.insert(String::from("de"), String::from("German"));
        layouts.insert(String::from("at"), String::from("German (Austria)"));
        layouts.insert(String::from("ch"), String::from("German (Switzerland)"));
        layouts.insert(String::from("gr"), String::from("Greek"));
        layouts.insert(String::from("il"), String::from("Hebrew"));
        layouts.insert(String::from("hu"), String::from("Hungarian"));
        layouts.insert(String::from("is"), String::from("Icelandic"));
        layouts.insert(String::from("in"), String::from("Indian"));
        layouts.insert(String::from("id"), String::from("Indonesian (Latin)"));
        layouts.insert(String::from("ie"), String::from("Irish"));
        layouts.insert(String::from("it"), String::from("Italian"));
        layouts.insert(String::from("jp"), String::from("Japanese"));
        layouts.insert(String::from("kz"), String::from("Kazakh"));
        layouts.insert(String::from("kh"), String::from("Khmer (Cambodia)"));
        layouts.insert(String::from("kr"), String::from("Korean"));
        layouts.insert(String::from("kg"), String::from("Kyrgyz"));
        layouts.insert(String::from("la"), String::from("Lao"));
        layouts.insert(String::from("lv"), String::from("Latvian"));
        layouts.insert(String::from("lt"), String::from("Lithuanian"));
        layouts.insert(String::from("mk"), String::from("Macedonian"));
        layouts.insert(String::from("my"), String::from("Malay (Jawi, Arabic Keyboard)"));
        layouts.insert(String::from("mt"), String::from("Maltese"));
        layouts.insert(String::from("md"), String::from("Moldavian"));
        layouts.insert(String::from("mn"), String::from("Mongolian"));
        layouts.insert(String::from("me"), String::from("Montenegrin"));
        layouts.insert(String::from("np"), String::from("Nepali"));
        layouts.insert(String::from("gn"), String::from("N'Ko (AZERTY)"));
        layouts.insert(String::from("no"), String::from("Norwegian"));
        layouts.insert(String::from("ir"), String::from("Persian"));
        layouts.insert(String::from("pl"), String::from("Polish"));
        layouts.insert(String::from("pt"), String::from("Portuguese"));
        layouts.insert(String::from("br"), String::from("Portuguese (Brazil)"));
        layouts.insert(String::from("ro"), String::from("Romanian"));
        layouts.insert(String::from("ru"), String::from("Russian"));
        layouts.insert(String::from("rs"), String::from("Serbian"));
        layouts.insert(String::from("lk"), String::from("Sinhala (phonetic)"));
        layouts.insert(String::from("sk"), String::from("Slovak"));
        layouts.insert(String::from("si"), String::from("Slovenian"));
        layouts.insert(String::from("es"), String::from("Spanish"));
        layouts.insert(String::from("latam"), String::from("Spanish (Latin American)"));
        layouts.insert(String::from("ke"), String::from("Swahili (Kenya)"));
        layouts.insert(String::from("tz"), String::from("Swahili (Tanzania)"));
        layouts.insert(String::from("se"), String::from("Swedish"));
        layouts.insert(String::from("tw"), String::from("Taiwanese"));
        layouts.insert(String::from("tj"), String::from("Tajik"));
        layouts.insert(String::from("th"), String::from("Thai"));
        layouts.insert(String::from("bw"), String::from("Tswana"));
        layouts.insert(String::from("tm"), String::from("Turkmen"));
        layouts.insert(String::from("tr"), String::from("Turkish"));
        layouts.insert(String::from("ua"), String::from("Ukrainian"));
        layouts.insert(String::from("pk"), String::from("Urdu (Pakistan)"));
        layouts.insert(String::from("uz"), String::from("Uzbek"));
        layouts.insert(String::from("vn"), String::from("Vietnamese"));
        layouts.insert(String::from("sn"), String::from("Wolof"));
        layouts.insert(String::from("custom"), String::from("A user-defined custom Layout"));

        vec![layouts]
    }

    pub fn layout(key: &str) -> String
    {
        let layouts = Self::layout_list();
        let mut value_layout = String::new();

        for layout in &layouts {
            if let Some(&ref value) = layout.get(key) {
                value_layout = value.clone();
            }else {
                value_layout = String::from("Layout not identified");
            }
        }

        value_layout
    }

    pub fn layout_json() -> String
    {
        let layout = Self::layout_list();
        serde_json::to_string_pretty(&layout).unwrap()
    }

    pub fn variant_list() -> Vec<HashMap<String, String>>
    {
        let mut variants = HashMap::new();

        variants.insert(String::from("plisi"), String::from("al: Albanian (Plisi)"));
        variants.insert(String::from("veqilharxhi"), String::from("al: Albanian (Veqilharxhi)"));
        variants.insert(String::from("phonetic"), String::from("am: Armenian (phonetic)"));
        variants.insert(String::from("phonetic-alt"), String::from("am: Armenian (alt. phonetic)"));
        variants.insert(String::from("eastern"), String::from("am: Armenian (eastern)"));
        variants.insert(String::from("eastern-alt"), String::from("am: Armenian (alt. eastern)"));
        variants.insert(String::from("western"), String::from("am: Armenian (western)"));
        variants.insert(String::from("digits"), String::from("ara: Arabic (Eastern Arabic numerals)"));
        variants.insert(String::from("azerty"), String::from("ara: Arabic (AZERTY)"));
        variants.insert(String::from("azerty_digits"), String::from("ara: Arabic (AZERTY, Eastern Arabic numerals)"));
        variants.insert(String::from("buckwalter"), String::from("ara: Arabic (Buckwalter)"));
        variants.insert(String::from("mac"), String::from("ara: Arabic (Macintosh)"));
        variants.insert(String::from("mac-phonetic"), String::from("ara: Arabic (Macintosh, phonetic)"));
        variants.insert(String::from("olpc"), String::from("ara: Arabic (OLPC)"));
        variants.insert(String::from("ku"), String::from("iq: Kurdish (Iraq, Latin Q)"));
        variants.insert(String::from("ku_alt"), String::from("iq: Kurdish (Iraq, Latin Alt-Q)"));
        variants.insert(String::from("ku_f"), String::from("iq: Kurdish (Iraq, F)"));
        variants.insert(String::from("ku_ara"), String::from("iq: Kurdish (Iraq, Arabic-Latin)"));
        variants.insert(String::from("tifinagh"), String::from("ma: Berber (Morocco, Tifinagh)"));
        variants.insert(String::from("tifinagh-alt"), String::from("ma: Berber (Morocco, Tifinagh alt.)"));
        variants.insert(String::from("tifinagh-alt-phonetic"), String::from("ma: Berber (Morocco, Tifinagh phonetic, alt.)"));
        variants.insert(String::from("tifinagh-extended"), String::from("ma: Berber (Morocco, Tifinagh extended)"));
        variants.insert(String::from("tifinagh-phonetic"), String::from("ma: Berber (Morocco, Tifinagh phonetic)"));
        variants.insert(String::from("tifinagh-extended-phonetic"), String::from("ma: Berber (Morocco, Tifinagh extended phonetic)"));
        variants.insert(String::from("french"), String::from("ma: French (Morocco)"));
        variants.insert(String::from("rif"), String::from("ma: Tarifit"));
        variants.insert(String::from("syc"), String::from("sy: Syriac"));
        variants.insert(String::from("syc_phonetic"), String::from("sy: Syriac (phonetic)"));
        variants.insert(String::from("ku_sy"), String::from("sy: Kurdish (Syria, Latin Q)"));
        variants.insert(String::from("ku_alt_sy"), String::from("sy: Kurdish (Syria, Latin Alt-Q)"));
        variants.insert(String::from("ku_f_sy"), String::from("sy: Kurdish (Syria, F)"));
        variants.insert(String::from("cyrillic"), String::from("az: Azerbaijani (Cyrillic)"));
        variants.insert(String::from("fr-oss"), String::from("ml: French (Mali, alt.)"));
        variants.insert(String::from("us-mac"), String::from("ml: English (Mali, US, Macintosh)"));
        variants.insert(String::from("us-intl"), String::from("ml: English (Mali, US, intl.)"));
        variants.insert(String::from("probhat"), String::from("bd: Bangla (Probhat)"));
        variants.insert(String::from("legacy"), String::from("by: Belarusian (legacy)"));
        variants.insert(String::from("latin"), String::from("by: Belarusian (Latin)"));
        variants.insert(String::from("intl"), String::from("by: Belarusian (intl.)"));
        variants.insert(String::from("phonetic_by"), String::from("by: Belarusian (phonetic)"));
        variants.insert(String::from("ru_by"), String::from("by: Russian (Belarus)"));
        variants.insert(String::from("oss"), String::from("be: Belgian (alt.)"));
        variants.insert(String::from("oss_latin9"), String::from("be: Belgian (Latin-9 only, alt.)"));
        variants.insert(String::from("iso-alternate"), String::from("be: Belgian (ISO, alt.)"));
        variants.insert(String::from("nodeadkeys_be"), String::from("be: Belgian (no dead keys)"));
        variants.insert(String::from("wang"), String::from("be: Belgian (Wang 724 AZERTY)"));
        variants.insert(String::from("ber"), String::from("dz: Berber (Algeria, Tifinagh)"));
        variants.insert(String::from("azerty-deadkeys"), String::from("dz: Kabyle (AZERTY, with dead keys)"));
        variants.insert(String::from("qwerty-gb-deadkeys"), String::from("dz: Kabyle (QWERTY, UK, with dead keys)"));
        variants.insert(String::from("qwerty-us-deadkeys"), String::from("dz: Kabyle (QWERTY, US, with dead keys)"));
        variants.insert(String::from("ar"), String::from("dz: Arabic (Algeria)"));
        variants.insert(String::from("alternatequotes"), String::from("ba: Bosnian (with guillemets)"));
        variants.insert(String::from("unicode"), String::from("ba: Bosnian (with Bosnian digraphs)"));
        variants.insert(String::from("unicodeus"), String::from("ba: Bosnian (US, with Bosnian digraphs)"));
        variants.insert(String::from("us_ba"), String::from("ba: Bosnian (US)"));
        variants.insert(String::from("left_hand"), String::from("brai: Braille (left-handed)"));
        variants.insert(String::from("left_hand_invert"), String::from("brai: Braille (left-handed inverted thumb)"));
        variants.insert(String::from("right_hand"), String::from("brai: Braille (right-handed)"));
        variants.insert(String::from("right_hand_invert"), String::from("brai: Braille (right-handed inverted thumb)"));
        variants.insert(String::from("phonetic_bg"), String::from("bg: Bulgarian (traditional phonetic)"));
        variants.insert(String::from("bas_phonetic"), String::from("bg: Bulgarian (new phonetic)"));
        variants.insert(String::from("bekl"), String::from("bg: Bulgarian (enhanced)"));
        variants.insert(String::from("zawgyi"), String::from("mm: Burmese (Zawgyi)"));
        variants.insert(String::from("mnw"), String::from("mm: Mon"));
        variants.insert(String::from("mnw-a1"), String::from("mm: Mon (A1)"));
        variants.insert(String::from("shn"), String::from("mm: Shan"));
        variants.insert(String::from("zgt"), String::from("mm: Shan (Zawgyi)"));
        variants.insert(String::from("altgr-pinyin"), String::from("cn: Hanyu Pinyin Letters (with AltGr dead keys)"));
        variants.insert(String::from("mon_trad"), String::from("cn: Mongolian (Bichig)"));
        variants.insert(String::from("mon_trad_todo"), String::from("cn: Mongolian (Todo)"));
        variants.insert(String::from("mon_trad_xibe"), String::from("cn: Mongolian (Xibe)"));
        variants.insert(String::from("mon_trad_manchu"), String::from("cn: Mongolian (Manchu)"));
        variants.insert(String::from("mon_trad_galik"), String::from("cn: Mongolian (Galik)"));
        variants.insert(String::from("mon_todo_galik"), String::from("cn: Mongolian (Todo Galik)"));
        variants.insert(String::from("mon_manchu_galik"), String::from("cn: Mongolian (Manchu Galik)"));
        variants.insert(String::from("tib"), String::from("cn: Tibetan"));
        variants.insert(String::from("tib_asciinum"), String::from("cn: Tibetan (with ASCII numerals)"));
        variants.insert(String::from("ug"), String::from("cn: Uyghur"));
        variants.insert(String::from("alternatequotes_hr"), String::from("hr: Croatian (with guillemets)"));
        variants.insert(String::from("unicode_hr"), String::from("hr: Croatian (with Croatian digraphs)"));
        variants.insert(String::from("unicodeus_hr"), String::from("hr: Croatian (US, with Croatian digraphs)"));
        variants.insert(String::from("us_hr"), String::from("hr: Croatian (US)"));
        variants.insert(String::from("bksl"), String::from("cz: Czech (extra backslash)"));
        variants.insert(String::from("qwerty_cz"), String::from("cz: Czech (QWERTY)"));
        variants.insert(String::from("qwerty_bksl"), String::from("cz: Czech (QWERTY, extra backslash)"));
        variants.insert(String::from("winkeys"), String::from("cz: Czech (QWERTZ, Windows)"));
        variants.insert(String::from("winkeys-qwerty"), String::from("cz: Czech (QWERTY, Windows)"));
        variants.insert(String::from("qwerty-mac"), String::from("cz: Czech (QWERTY, Macintosh)"));
        variants.insert(String::from("ucw"), String::from("cz: Czech (UCW, only accented letters)"));
        variants.insert(String::from("dvorak-ucw"), String::from("cz: Czech (US, Dvorak, UCW support)"));
        variants.insert(String::from("rus"), String::from("cz: Russian (Czechia, phonetic)"));
        variants.insert(String::from("nodeadkeys_dk"), String::from("dk: Danish (no dead keys)"));
        variants.insert(String::from("winkeys_dk"), String::from("dk: Danish (Windows)"));
        variants.insert(String::from("mac_dk"), String::from("dk: Danish (Macintosh)"));
        variants.insert(String::from("mac_nodeadkeys"), String::from("dk: Danish (Macintosh, no dead keys)"));
        variants.insert(String::from("dvorak_dk"), String::from("dk: Danish (Dvorak)"));
        variants.insert(String::from("ps"), String::from("af: Pashto"));
        variants.insert(String::from("uz"), String::from("af: Uzbek (Afghanistan)"));
        variants.insert(String::from("fa-olpc"), String::from("af: Dari (Afghanistan, OLPC)"));
        variants.insert(String::from("ps-olpc"), String::from("af: Pashto (Afghanistan, OLPC)"));
        variants.insert(String::from("uz-olpc"), String::from("af: Uzbek (Afghanistan, OLPC)"));
        variants.insert(String::from("us_nl"), String::from("nl: Dutch (US)"));
        variants.insert(String::from("mac_nl"), String::from("nl: Dutch (Macintosh)"));
        variants.insert(String::from("std_nl"), String::from("nl: Dutch (standard)"));
        variants.insert(String::from("french_cm"), String::from("cm: French (Cameroon)"));
        variants.insert(String::from("qwerty_cm"), String::from("cm: Cameroon Multilingual (QWERTY, intl.)"));
        variants.insert(String::from("azerty_cm"), String::from("cm: Cameroon (AZERTY, intl.)"));
        variants.insert(String::from("dvorak_cm"), String::from("cm: Cameroon (Dvorak, intl.)"));
        variants.insert(String::from("mmuock"), String::from("cm: Mmuock"));
        variants.insert(String::from("generic"), String::from("gh: English (Ghana, multilingual)"));
        variants.insert(String::from("gillbt"), String::from("gh: English (Ghana, GILLBT)"));
        variants.insert(String::from("akan"), String::from("gh: Akan"));
        variants.insert(String::from("avn"), String::from("gh: Avatime"));
        variants.insert(String::from("ewe"), String::from("gh: Ewe"));
        variants.insert(String::from("fula"), String::from("gh: Fula"));
        variants.insert(String::from("ga"), String::from("gh: Ga"));
        variants.insert(String::from("hausa_gh"), String::from("gh: Hausa (Ghana)"));
        variants.insert(String::from("mao"), String::from("nz: Maori"));
        variants.insert(String::from("hausa_ng"), String::from("ng: Hausa (Nigeria)"));
        variants.insert(String::from("igbo"), String::from("ng: Igbo"));
        variants.insert(String::from("yoruba"), String::from("ng: Yoruba"));
        variants.insert(String::from("extd"), String::from("gb: English (UK, extended, Windows)"));
        variants.insert(String::from("intl_gb"), String::from("gb: English (UK, intl., with dead keys)"));
        variants.insert(String::from("dvorak_gb"), String::from("gb: English (UK, Dvorak)"));
        variants.insert(String::from("dvorakukp"), String::from("gb: English (UK, Dvorak, with UK punctuation)"));
        variants.insert(String::from("mac_gb"), String::from("gb: English (UK, Macintosh)"));
        variants.insert(String::from("mac_intl_gb"), String::from("gb: English (UK, Macintosh, intl.)"));
        variants.insert(String::from("colemak_gb"), String::from("gb: English (UK, Colemak)"));
        variants.insert(String::from("colemak_dh_gb"), String::from("gb: English (UK, Colemak-DH)"));
        variants.insert(String::from("gla"), String::from("gb: Scottish Gaelic"));
        variants.insert(String::from("pl_gb"), String::from("gb: Polish (British keyboard)"));
        variants.insert(String::from("euro"), String::from("us: English (US, euro on 5)"));
        variants.insert(String::from("intl"), String::from("us: English (US, intl., with dead keys)"));
        variants.insert(String::from("alt-intl"), String::from("us: English (US, alt. intl.)"));
        variants.insert(String::from("altgr-intl"), String::from("us: English (intl., with AltGr dead keys)"));
        variants.insert(String::from("mac"), String::from("us: English (Macintosh)"));
        variants.insert(String::from("colemak"), String::from("us: English (Colemak)"));
        variants.insert(String::from("colemak_dh"), String::from("us: English (Colemak-DH)"));
        variants.insert(String::from("colemak_dh_wide"), String::from("us: English (Colemak-DH Wide)"));
        variants.insert(String::from("colemak_dh_ortho"), String::from("us: English (Colemak-DH Ortholinear)"));
        variants.insert(String::from("colemak_dh_iso"), String::from("us: English (Colemak-DH ISO)"));
        variants.insert(String::from("colemak_dh_wide_iso"), String::from("us: English (Colemak-DH Wide ISO)"));
        variants.insert(String::from("dvorak"), String::from("us: English (Dvorak)"));
        variants.insert(String::from("dvorak-intl"), String::from("us: English (Dvorak, intl., with dead keys)"));
        variants.insert(String::from("dvorak-alt-intl"), String::from("us: English (Dvorak, alt. intl.)"));
        variants.insert(String::from("dvorak-l"), String::from("us: English (Dvorak, left-handed)"));
        variants.insert(String::from("dvorak-r"), String::from("us: English (Dvorak, right-handed)"));
        variants.insert(String::from("dvorak-classic"), String::from("us: English (classic Dvorak)"));
        variants.insert(String::from("dvp"), String::from("us: English (programmer Dvorak)"));
        variants.insert(String::from("dvorak-mac"), String::from("us: English (Dvorak, Macintosh)"));
        variants.insert(String::from("norman"), String::from("us: English (Norman)"));
        variants.insert(String::from("symbolic"), String::from("us: English (US, Symbolic)"));
        variants.insert(String::from("workman"), String::from("us: English (Workman)"));
        variants.insert(String::from("workman-intl"), String::from("us: English (Workman, intl., with dead keys)"));
        variants.insert(String::from("olpc2"), String::from("us: English (the divide/multiply toggle the layout)"));
        variants.insert(String::from("chr"), String::from("us: Cherokee"));
        variants.insert(String::from("haw"), String::from("us: Hawaiian"));
        variants.insert(String::from("rus"), String::from("us: Russian (US, phonetic)"));
        variants.insert(String::from("hbs"), String::from("us: Serbo-Croatian (US)"));
        variants.insert(String::from("legacy"), String::from("epo: Esperanto (legacy)"));
        variants.insert(String::from("nodeadkeys"), String::from("ee: Estonian (no dead keys)"));
        variants.insert(String::from("dvorak"), String::from("ee: Estonian (Dvorak)"));
        variants.insert(String::from("us"), String::from("ee: Estonian (US)"));
        variants.insert(String::from("nodeadkeys"), String::from("fo: Faroese (no dead keys)"));
        variants.insert(String::from("qwerty-bay"), String::from("ph: Filipino (QWERTY, Baybayin)"));
        variants.insert(String::from("capewell-dvorak"), String::from("ph: Filipino (Capewell-Dvorak, Latin)"));
        variants.insert(String::from("capewell-dvorak-bay"), String::from("ph: Filipino (Capewell-Dvorak, Baybayin)"));
        variants.insert(String::from("capewell-qwerf2k6"), String::from("ph: Filipino (Capewell-QWERF 2006, Latin)"));
        variants.insert(String::from("capewell-qwerf2k6-bay"), String::from("ph: Filipino (Capewell-QWERF 2006, Baybayin)"));
        variants.insert(String::from("colemak"), String::from("ph: Filipino (Colemak, Latin)"));
        variants.insert(String::from("colemak-bay"), String::from("ph: Filipino (Colemak, Baybayin)"));
        variants.insert(String::from("dvorak"), String::from("ph: Filipino (Dvorak, Latin)"));
        variants.insert(String::from("dvorak-bay"), String::from("ph: Filipino (Dvorak, Baybayin)"));
        variants.insert(String::from("winkeys"), String::from("fi: Finnish (Windows)"));
        variants.insert(String::from("classic"), String::from("fi: Finnish (classic)"));
        variants.insert(String::from("nodeadkeys"), String::from("fi: Finnish (classic, no dead keys)"));
        variants.insert(String::from("mac"), String::from("fi: Finnish (Macintosh)"));
        variants.insert(String::from("smi"), String::from("fi: Northern Saami (Finland)"));
        variants.insert(String::from("nodeadkeys"), String::from("fr: French (no dead keys)"));
        variants.insert(String::from("oss"), String::from("fr: French (alt.)"));
        variants.insert(String::from("oss_nodeadkeys"), String::from("fr: French (alt., no dead keys)"));
        variants.insert(String::from("oss_latin9"), String::from("fr: French (alt., Latin-9 only)"));
        variants.insert(String::from("latin9"), String::from("fr: French (legacy, alt.)"));
        variants.insert(String::from("latin9_nodeadkeys"), String::from("fr: French (legacy, alt., no dead keys)"));
        variants.insert(String::from("azerty"), String::from("fr: French (AZERTY)"));
        variants.insert(String::from("afnor"), String::from("fr: French (AZERTY, AFNOR)"));
        variants.insert(String::from("bepo"), String::from("fr: French (BEPO)"));
        variants.insert(String::from("bepo_latin9"), String::from("fr: French (BEPO, Latin-9 only)"));
        variants.insert(String::from("bepo_afnor"), String::from("fr: French (BEPO, AFNOR)"));
        variants.insert(String::from("dvorak"), String::from("fr: French (Dvorak)"));
        variants.insert(String::from("ergol"), String::from("fr: French (Ergo‑L)"));
        variants.insert(String::from("ergol_iso"), String::from("fr: French (Ergo‑L, ISO variant)"));
        variants.insert(String::from("mac"), String::from("fr: French (Macintosh)"));
        variants.insert(String::from("us"), String::from("fr: French (US)"));
        variants.insert(String::from("bre"), String::from("fr: Breton (France)"));
        variants.insert(String::from("oci"), String::from("fr: Occitan"));
        variants.insert(String::from("geo"), String::from("fr: Georgian (France, AZERTY Tskapo)"));
        variants.insert(String::from("fr-dvorak"), String::from("ca: French (Canada, Dvorak)"));
        variants.insert(String::from("fr-legacy"), String::from("ca: French (Canada, legacy)"));
        variants.insert(String::from("multix"), String::from("ca: Canadian (CSA)"));
        variants.insert(String::from("eng"), String::from("ca: English (Canada)"));
        variants.insert(String::from("ike"), String::from("ca: Inuktitut"));
        variants.insert(String::from("ergonomic"), String::from("ge: Georgian (ergonomic)"));
        variants.insert(String::from("mess"), String::from("ge: Georgian (MESS)"));
        variants.insert(String::from("os"), String::from("ge: Ossetian (Georgia)"));
        variants.insert(String::from("ru"), String::from("ge: Russian (Georgia)"));
        variants.insert(String::from("deadacute"), String::from("de: German (dead acute)"));
        variants.insert(String::from("deadgraveacute"), String::from("de: German (dead grave acute)"));
        variants.insert(String::from("deadtilde"), String::from("de: German (dead tilde)"));
        variants.insert(String::from("nodeadkeys"), String::from("de: German (no dead keys)"));
        variants.insert(String::from("e1"), String::from("de: German (E1)"));
        variants.insert(String::from("e2"), String::from("de: German (E2)"));
        variants.insert(String::from("T3"), String::from("de: German (T3)"));
        variants.insert(String::from("us"), String::from("de: German (US)"));
        variants.insert(String::from("dvorak"), String::from("de: German (Dvorak)"));
        variants.insert(String::from("mac"), String::from("de: German (Macintosh)"));
        variants.insert(String::from("mac_nodeadkeys"), String::from("de: German (Macintosh, no dead keys)"));
        variants.insert(String::from("neo"), String::from("de: German (Neo 2)"));
        variants.insert(String::from("qwerty"), String::from("de: German (QWERTY)"));
        variants.insert(String::from("dsb"), String::from("de: Lower Sorbian"));
        variants.insert(String::from("dsb_qwertz"), String::from("de: Lower Sorbian (QWERTZ)"));
        variants.insert(String::from("ro"), String::from("de: Romanian (Germany)"));
        variants.insert(String::from("ro_nodeadkeys"), String::from("de: Romanian (Germany, no dead keys)"));
        variants.insert(String::from("ru"), String::from("de: Russian (Germany, phonetic)"));
        variants.insert(String::from("tr"), String::from("de: Turkish (Germany)"));
        variants.insert(String::from("nodeadkeys"), String::from("at: German (Austria, no dead keys)"));
        variants.insert(String::from("mac"), String::from("at: German (Austria, Macintosh)"));
        variants.insert(String::from("de_nodeadkeys"), String::from("ch: German (Switzerland, no dead keys)"));
        variants.insert(String::from("de_mac"), String::from("ch: German (Switzerland, Macintosh)"));
        variants.insert(String::from("legacy"), String::from("ch: German (Switzerland, legacy)"));
        variants.insert(String::from("fr"), String::from("ch: French (Switzerland)"));
        variants.insert(String::from("fr_nodeadkeys"), String::from("ch: French (Switzerland, no dead keys)"));
        variants.insert(String::from("fr_mac"), String::from("ch: French (Switzerland, Macintosh)"));
        variants.insert(String::from("simple"), String::from("gr: Greek (simple)"));
        variants.insert(String::from("nodeadkeys"), String::from("gr: Greek (no dead keys)"));
        variants.insert(String::from("polytonic"), String::from("gr: Greek (polytonic)"));
        variants.insert(String::from("si2"), String::from("il: Hebrew (SI-1452-2)"));
        variants.insert(String::from("lyx"), String::from("il: Hebrew (lyx)"));
        variants.insert(String::from("phonetic"), String::from("il: Hebrew (phonetic)"));
        variants.insert(String::from("biblical"), String::from("il: Hebrew (Biblical, Tiro)"));
        variants.insert(String::from("standard"), String::from("hu: Hungarian (standard)"));
        variants.insert(String::from("nodeadkeys"), String::from("hu: Hungarian (no dead keys)"));
        variants.insert(String::from("qwerty"), String::from("hu: Hungarian (QWERTY)"));
        variants.insert(String::from("101_qwertz_comma_dead"), String::from("hu: Hungarian (QWERTZ, 101-key, comma, dead keys)"));
        variants.insert(String::from("101_qwertz_comma_nodead"), String::from("hu: Hungarian (QWERTZ, 101-key, comma, no dead keys)"));
        variants.insert(String::from("101_qwertz_dot_dead"), String::from("hu: Hungarian (QWERTZ, 101-key, dot, dead keys)"));
        variants.insert(String::from("101_qwertz_dot_nodead"), String::from("hu: Hungarian (QWERTZ, 101-key, dot, no dead keys)"));
        variants.insert(String::from("101_qwerty_comma_dead"), String::from("hu: Hungarian (QWERTY, 101-key, comma, dead keys)"));
        variants.insert(String::from("101_qwerty_comma_nodead"), String::from("hu: Hungarian (QWERTY, 101-key, comma, no dead keys)"));
        variants.insert(String::from("101_qwerty_dot_dead"), String::from("hu: Hungarian (QWERTY, 101-key, dot, dead keys)"));
        variants.insert(String::from("101_qwerty_dot_nodead"), String::from("hu: Hungarian (QWERTY, 101-key, dot, no dead keys)"));
        variants.insert(String::from("102_qwertz_comma_dead"), String::from("hu: Hungarian (QWERTZ, 102-key, comma, dead keys)"));
        variants.insert(String::from("102_qwertz_comma_nodead"), String::from("hu: Hungarian (QWERTZ, 102-key, comma, no dead keys)"));
        variants.insert(String::from("102_qwertz_dot_dead"), String::from("hu: Hungarian (QWERTZ, 102-key, dot, dead keys)"));
        variants.insert(String::from("102_qwertz_dot_nodead"), String::from("hu: Hungarian (QWERTZ, 102-key, dot, no dead keys)"));
        variants.insert(String::from("102_qwerty_comma_dead"), String::from("hu: Hungarian (QWERTY, 102-key, comma, dead keys)"));
        variants.insert(String::from("102_qwerty_comma_nodead"), String::from("hu: Hungarian (QWERTY, 102-key, comma, no dead keys)"));
        variants.insert(String::from("102_qwerty_dot_dead"), String::from("hu: Hungarian (QWERTY, 102-key, dot, dead keys)"));
        variants.insert(String::from("102_qwerty_dot_nodead"), String::from("hu: Hungarian (QWERTY, 102-key, dot, no dead keys)"));
        variants.insert(String::from("mac_legacy"), String::from("is: Icelandic (Macintosh, legacy)"));
        variants.insert(String::from("mac"), String::from("is: Icelandic (Macintosh)"));
        variants.insert(String::from("dvorak"), String::from("is: Icelandic (Dvorak)"));
        variants.insert(String::from("asm-kagapa"), String::from("in: Assamese (KaGaPa, phonetic)"));
        variants.insert(String::from("ben"), String::from("in: Bangla (India)"));
        variants.insert(String::from("ben_probhat"), String::from("in: Bangla (India, Probhat)"));
        variants.insert(String::from("ben_baishakhi"), String::from("in: Bangla (India, Baishakhi)"));
        variants.insert(String::from("ben_bornona"), String::from("in: Bangla (India, Bornona)"));
        variants.insert(String::from("ben-kagapa"), String::from("in: Bangla (India, KaGaPa, phonetic)"));
        variants.insert(String::from("ben_gitanjali"), String::from("in: Bangla (India, Gitanjali)"));
        variants.insert(String::from("ben_inscript"), String::from("in: Bangla (India, Baishakhi InScript)"));
        variants.insert(String::from("eng"), String::from("in: English (India, with rupee)"));
        variants.insert(String::from("guj"), String::from("in: Gujarati"));
        variants.insert(String::from("guj-kagapa"), String::from("in: Gujarati (KaGaPa, phonetic)"));
        variants.insert(String::from("bolnagri"), String::from("in: Hindi (Bolnagri)"));
        variants.insert(String::from("hin-wx"), String::from("in: Hindi (Wx)"));
        variants.insert(String::from("hin-kagapa"), String::from("in: Hindi (KaGaPa, phonetic)"));
        variants.insert(String::from("kan"), String::from("in: Kannada"));
        variants.insert(String::from("kan-kagapa"), String::from("in: Kannada (KaGaPa, phonetic)"));
        variants.insert(String::from("mal"), String::from("in: Malayalam"));
        variants.insert(String::from("mal_lalitha"), String::from("in: Malayalam (Lalitha)"));
        variants.insert(String::from("mal_enhanced"), String::from("in: Malayalam (enhanced InScript, with rupee)"));
        variants.insert(String::from("mal_poorna"), String::from("in: Malayalam (Poorna, extended InScript)"));
        variants.insert(String::from("mni"), String::from("in: Manipuri (Meitei)"));
        variants.insert(String::from("mar-kagapa"), String::from("in: Marathi (KaGaPa, phonetic)"));
        variants.insert(String::from("marathi"), String::from("in: Marathi (enhanced InScript)"));
        variants.insert(String::from("ori"), String::from("in: Oriya"));
        variants.insert(String::from("ori-bolnagri"), String::from("in: Oriya (Bolnagri)"));
        variants.insert(String::from("ori-wx"), String::from("in: Oriya (Wx)"));
        variants.insert(String::from("guru"), String::from("in: Punjabi (Gurmukhi)"));
        variants.insert(String::from("jhelum"), String::from("in: Punjabi (Gurmukhi Jhelum)"));
        variants.insert(String::from("san-kagapa"), String::from("in: Sanskrit (KaGaPa, phonetic)"));
        variants.insert(String::from("sat"), String::from("in: Santali (Ol Chiki)"));
        variants.insert(String::from("tamilnet"), String::from("in: Tamil (TamilNet '99)"));
        variants.insert(String::from("tamilnet_tamilnumbers"), String::from("in: Tamil (TamilNet '99 with Tamil numerals)"));
        variants.insert(String::from("tamilnet_TAB"), String::from("in: Tamil (TamilNet '99, TAB encoding)"));
        variants.insert(String::from("tamilnet_TSCII"), String::from("in: Tamil (TamilNet '99, TSCII encoding)"));
        variants.insert(String::from("tam"), String::from("in: Tamil (InScript, with Arabic numerals)"));
        variants.insert(String::from("tam_tamilnumbers"), String::from("in: Tamil (InScript, with Tamil numerals)"));
        variants.insert(String::from("tel"), String::from("in: Telugu"));
        variants.insert(String::from("tel-kagapa"), String::from("in: Telugu (KaGaPa, phonetic)"));
        variants.insert(String::from("tel-sarala"), String::from("in: Telugu (Sarala)"));
        variants.insert(String::from("urd-phonetic"), String::from("in: Urdu (phonetic)"));
        variants.insert(String::from("urd-phonetic3"), String::from("in: Urdu (alt. phonetic)"));
        variants.insert(String::from("urd-winkeys"), String::from("in: Urdu (Windows)"));
        variants.insert(String::from("iipa"), String::from("in: Indic IPA"));
        variants.insert(String::from("melayu-phonetic"), String::from("id: Indonesian (Arab Melayu, phonetic)"));
        variants.insert(String::from("melayu-phoneticx"), String::from("id: Indonesian (Arab Melayu, extended phonetic)"));
        variants.insert(String::from("pegon-phonetic"), String::from("id: Indonesian (Arab Pegon, phonetic)"));
        variants.insert(String::from("javanese"), String::from("id: Javanese"));
        variants.insert(String::from("UnicodeExpert"), String::from("ie: Irish (UnicodeExpert)"));
        variants.insert(String::from("CloGaelach"), String::from("ie: CloGaelach"));
        variants.insert(String::from("ogam"), String::from("ie: Ogham"));
        variants.insert(String::from("ogam_is434"), String::from("ie: Ogham (IS434)"));
        variants.insert(String::from("nodeadkeys"), String::from("it: Italian (no dead keys)"));
        variants.insert(String::from("winkeys"), String::from("it: Italian (Windows)"));
        variants.insert(String::from("mac"), String::from("it: Italian (Macintosh)"));
        variants.insert(String::from("us"), String::from("it: Italian (US)"));
        variants.insert(String::from("ibm"), String::from("it: Italian (IBM 142)"));
        variants.insert(String::from("fur"), String::from("it: Friulian (Italy)"));
        variants.insert(String::from("scn"), String::from("it: Sicilian"));
        variants.insert(String::from("geo"), String::from("it: Georgian (Italy)"));
        variants.insert(String::from("kana"), String::from("jp: Japanese (Kana)"));
        variants.insert(String::from("kana86"), String::from("jp: Japanese (Kana 86)"));
        variants.insert(String::from("OADG109A"), String::from("jp: Japanese (OADG 109A)"));
        variants.insert(String::from("mac"), String::from("jp: Japanese (Macintosh)"));
        variants.insert(String::from("dvorak"), String::from("jp: Japanese (Dvorak)"));
        variants.insert(String::from("kazrus"), String::from("kz: Kazakh (with Russian)"));
        variants.insert(String::from("ext"), String::from("kz: Kazakh (extended)"));
        variants.insert(String::from("latin"), String::from("kz: Kazakh (Latin)"));
        variants.insert(String::from("ruskaz"), String::from("kz: Russian (Kazakhstan, with Kazakh)"));
        variants.insert(String::from("kr104"), String::from("kr: Korean (101/104-key compatible)"));
        variants.insert(String::from("phonetic"), String::from("kg: Kyrgyz (phonetic)"));
        variants.insert(String::from("stea"), String::from("la: Lao (STEA)"));
        variants.insert(String::from("apostrophe"), String::from("lv: Latvian (apostrophe)"));
        variants.insert(String::from("tilde"), String::from("lv: Latvian (tilde)"));
        variants.insert(String::from("fkey"), String::from("lv: Latvian (F)"));
        variants.insert(String::from("modern"), String::from("lv: Latvian (Modern Latin)"));
        variants.insert(String::from("modern-cyr"), String::from("lv: Latvian (Modern Cyrillic)"));
        variants.insert(String::from("ergonomic"), String::from("lv: Latvian (ergonomic, ŪGJRMV)"));
        variants.insert(String::from("adapted"), String::from("lv: Latvian (adapted)"));
        variants.insert(String::from("std"), String::from("lt: Lithuanian (standard)"));
        variants.insert(String::from("us"), String::from("lt: Lithuanian (US)"));
        variants.insert(String::from("ibm"), String::from("lt: Lithuanian (IBM)"));
        variants.insert(String::from("lekp"), String::from("lt: Lithuanian (LEKP)"));
        variants.insert(String::from("lekpa"), String::from("lt: Lithuanian (LEKPa)"));
        variants.insert(String::from("ratise"), String::from("lt: Lithuanian (Ratise)"));
        variants.insert(String::from("sgs"), String::from("lt: Samogitian"));
        variants.insert(String::from("nodeadkeys"), String::from("mk: Macedonian (no dead keys)"));
        variants.insert(String::from("phonetic"), String::from("my: Malay (Jawi, phonetic)"));
        variants.insert(String::from("us"), String::from("mt: Maltese (US)"));
        variants.insert(String::from("alt-us"), String::from("mt: Maltese (US, with AltGr overrides)"));
        variants.insert(String::from("alt-gb"), String::from("mt: Maltese (UK, with AltGr overrides)"));
        variants.insert(String::from("gag"), String::from("md: Gagauz (Moldova)"));
        variants.insert(String::from("cyrillic"), String::from("me: Montenegrin (Cyrillic)"));
        variants.insert(String::from("cyrillicyz"), String::from("me: Montenegrin (Cyrillic, ZE and ZHE swapped)"));
        variants.insert(String::from("cyrillicalternatequotes"), String::from("me: Montenegrin (Cyrillic, with guillemets)"));
        variants.insert(String::from("latinunicode"), String::from("me: Montenegrin (Latin, Unicode)"));
        variants.insert(String::from("latinyz"), String::from("me: Montenegrin (Latin, QWERTY)"));
        variants.insert(String::from("latinunicodeyz"), String::from("me: Montenegrin (Latin, Unicode, QWERTY)"));
        variants.insert(String::from("latinalternatequotes"), String::from("me: Montenegrin (Latin, with guillemets)"));
        variants.insert(String::from("nodeadkeys"), String::from("no: Norwegian (no dead keys)"));
        variants.insert(String::from("winkeys"), String::from("no: Norwegian (Windows)"));
        variants.insert(String::from("mac"), String::from("no: Norwegian (Macintosh)"));
        variants.insert(String::from("mac_nodeadkeys"), String::from("no: Norwegian (Macintosh, no dead keys)"));
        variants.insert(String::from("colemak"), String::from("no: Norwegian (Colemak)"));
        variants.insert(String::from("colemak_dh"), String::from("no: Norwegian (Colemak-DH)"));
        variants.insert(String::from("colemak_dh_wide"), String::from("no: Norwegian (Colemak-DH Wide)"));
        variants.insert(String::from("dvorak"), String::from("no: Norwegian (Dvorak)"));
        variants.insert(String::from("smi"), String::from("no: Northern Saami (Norway)"));
        variants.insert(String::from("smi_nodeadkeys"), String::from("no: Northern Saami (Norway, no dead keys)"));
        variants.insert(String::from("pes_keypad"), String::from("ir: Persian (with Persian keypad)"));
        variants.insert(String::from("winkeys"), String::from("ir: Persian (Windows)"));
        variants.insert(String::from("azb"), String::from("ir: Azerbaijani (Iran)"));
        variants.insert(String::from("ku"), String::from("ir: Kurdish (Iran, Latin Q)"));
        variants.insert(String::from("ku_alt"), String::from("ir: Kurdish (Iran, Latin Alt-Q)"));
        variants.insert(String::from("ku_f"), String::from("ir: Kurdish (Iran, F)"));
        variants.insert(String::from("ku_ara"), String::from("ir: Kurdish (Iran, Arabic-Latin)"));
        variants.insert(String::from("legacy"), String::from("pl: Polish (legacy)"));
        variants.insert(String::from("qwertz"), String::from("pl: Polish (QWERTZ)"));
        variants.insert(String::from("dvorak"), String::from("pl: Polish (Dvorak)"));
        variants.insert(String::from("dvorak_quotes"), String::from("pl: Polish (Dvorak, with Polish quotes on quotemark key)"));
        variants.insert(String::from("dvorak_altquotes"), String::from("pl: Polish (Dvorak, with Polish quotes on key 1)"));
        variants.insert(String::from("dvp"), String::from("pl: Polish (programmer Dvorak)"));
        variants.insert(String::from("csb"), String::from("pl: Kashubian"));
        variants.insert(String::from("szl"), String::from("pl: Silesian"));
        variants.insert(String::from("ru_phonetic_dvorak"), String::from("pl: Russian (Poland, phonetic Dvorak)"));
        variants.insert(String::from("nodeadkeys"), String::from("pt: Portuguese (no dead keys)"));
        variants.insert(String::from("mac"), String::from("pt: Portuguese (Macintosh)"));
        variants.insert(String::from("mac_nodeadkeys"), String::from("pt: Portuguese (Macintosh, no dead keys)"));
        variants.insert(String::from("nativo"), String::from("pt: Portuguese (Nativo)"));
        variants.insert(String::from("nativo-us"), String::from("pt: Portuguese (Nativo for US keyboards)"));
        variants.insert(String::from("nativo-epo"), String::from("pt: Esperanto (Portugal, Nativo)"));
        variants.insert(String::from("nodeadkeys"), String::from("br: Portuguese (Brazil, no dead keys)"));
        variants.insert(String::from("dvorak"), String::from("br: Portuguese (Brazil, Dvorak)"));
        variants.insert(String::from("nativo"), String::from("br: Portuguese (Brazil, Nativo)"));
        variants.insert(String::from("nativo-us"), String::from("br: Portuguese (Brazil, Nativo for US keyboards)"));
        variants.insert(String::from("thinkpad"), String::from("br: Portuguese (Brazil, IBM/Lenovo ThinkPad)"));
        variants.insert(String::from("nativo-epo"), String::from("br: Esperanto (Brazil, Nativo)"));
        variants.insert(String::from("rus"), String::from("br: Russian (Brazil, phonetic)"));
        variants.insert(String::from("std"), String::from("ro: Romanian (standard)"));
        variants.insert(String::from("winkeys"), String::from("ro: Romanian (Windows)"));
        variants.insert(String::from("phonetic"), String::from("ru: Russian (phonetic)"));
        variants.insert(String::from("phonetic_winkeys"), String::from("ru: Russian (phonetic, Windows)"));
        variants.insert(String::from("phonetic_YAZHERTY"), String::from("ru: Russian (phonetic, YAZHERTY)"));
        variants.insert(String::from("phonetic_azerty"), String::from("ru: Russian (phonetic, AZERTY)"));
        variants.insert(String::from("phonetic_dvorak"), String::from("ru: Russian (phonetic, Dvorak)"));
        variants.insert(String::from("typewriter"), String::from("ru: Russian (typewriter)"));
        variants.insert(String::from("ruchey_ru"), String::from("ru: Russian (engineering, RU)"));
        variants.insert(String::from("ruchey_en"), String::from("ru: Russian (engineering, EN)"));
        variants.insert(String::from("legacy"), String::from("ru: Russian (legacy)"));
        variants.insert(String::from("typewriter-legacy"), String::from("ru: Russian (typewriter, legacy)"));
        variants.insert(String::from("dos"), String::from("ru: Russian (DOS)"));
        variants.insert(String::from("mac"), String::from("ru: Russian (Macintosh)"));
        variants.insert(String::from("ab"), String::from("ru: Abkhazian (Russia)"));
        variants.insert(String::from("bak"), String::from("ru: Bashkirian"));
        variants.insert(String::from("cv"), String::from("ru: Chuvash"));
        variants.insert(String::from("cv_latin"), String::from("ru: Chuvash (Latin)"));
        variants.insert(String::from("xal"), String::from("ru: Kalmyk"));
        variants.insert(String::from("kom"), String::from("ru: Komi"));
        variants.insert(String::from("chm"), String::from("ru: Mari"));
        variants.insert(String::from("os_legacy"), String::from("ru: Ossetian (legacy)"));
        variants.insert(String::from("os_winkeys"), String::from("ru: Ossetian (Windows)"));
        variants.insert(String::from("srp"), String::from("ru: Serbian (Russia)"));
        variants.insert(String::from("tt"), String::from("ru: Tatar"));
        variants.insert(String::from("udm"), String::from("ru: Udmurt"));
        variants.insert(String::from("sah"), String::from("ru: Yakut"));
        variants.insert(String::from("alternatequotes"), String::from("rs: Serbian (Cyrillic, with guillemets)"));
        variants.insert(String::from("yz"), String::from("rs: Serbian (Cyrillic, ZE and ZHE swapped)"));
        variants.insert(String::from("latin"), String::from("rs: Serbian (Latin)"));
        variants.insert(String::from("latinalternatequotes"), String::from("rs: Serbian (Latin, with guillemets)"));
        variants.insert(String::from("latinunicode"), String::from("rs: Serbian (Latin, Unicode)"));
        variants.insert(String::from("latinyz"), String::from("rs: Serbian (Latin, QWERTY)"));
        variants.insert(String::from("latinunicodeyz"), String::from("rs: Serbian (Latin, Unicode, QWERTY)"));
        variants.insert(String::from("rue"), String::from("rs: Pannonian Rusyn"));
        variants.insert(String::from("us"), String::from("lk: Sinhala (US)"));
        variants.insert(String::from("tam_unicode"), String::from("lk: Tamil (Sri Lanka, TamilNet '99)"));
        variants.insert(String::from("tam_TAB"), String::from("lk: Tamil (Sri Lanka, TamilNet '99, TAB encoding)"));
        variants.insert(String::from("bksl"), String::from("sk: Slovak (extra backslash)"));
        variants.insert(String::from("qwerty"), String::from("sk: Slovak (QWERTY)"));
        variants.insert(String::from("qwerty_bksl"), String::from("sk: Slovak (QWERTY, extra backslash)"));
        variants.insert(String::from("alternatequotes"), String::from("si: Slovenian (with guillemets)"));
        variants.insert(String::from("us"), String::from("si: Slovenian (US)"));
        variants.insert(String::from("nodeadkeys"), String::from("es: Spanish (no dead keys)"));
        variants.insert(String::from("deadtilde"), String::from("es: Spanish (dead tilde)"));
        variants.insert(String::from("winkeys"), String::from("es: Spanish (Windows)"));
        variants.insert(String::from("dvorak"), String::from("es: Spanish (Dvorak)"));
        variants.insert(String::from("ast"), String::from("es: Asturian (Spain, with bottom-dot H and L)"));
        variants.insert(String::from("cat"), String::from("es: Catalan (Spain, with middle-dot L)"));
        variants.insert(String::from("nodeadkeys"), String::from("latam: Spanish (Latin American, no dead keys)"));
        variants.insert(String::from("deadtilde"), String::from("latam: Spanish (Latin American, dead tilde)"));
        variants.insert(String::from("dvorak"), String::from("latam: Spanish (Latin American, Dvorak)"));
        variants.insert(String::from("colemak"), String::from("latam: Spanish (Latin American, Colemak)"));
        variants.insert(String::from("kik"), String::from("ke: Kikuyu"));
        variants.insert(String::from("nodeadkeys"), String::from("se: Swedish (no dead keys)"));
        variants.insert(String::from("dvorak"), String::from("se: Swedish (Dvorak)"));
        variants.insert(String::from("us_dvorak"), String::from("se: Swedish (Dvorak, intl.)"));
        variants.insert(String::from("svdvorak"), String::from("se: Swedish (Svdvorak)"));
        variants.insert(String::from("mac"), String::from("se: Swedish (Macintosh)"));
        variants.insert(String::from("us"), String::from("se: Swedish (US)"));
        variants.insert(String::from("swl"), String::from("se: Swedish Sign Language"));
        variants.insert(String::from("smi"), String::from("se: Northern Saami (Sweden)"));
        variants.insert(String::from("rus"), String::from("se: Russian (Sweden, phonetic)"));
        variants.insert(String::from("indigenous"), String::from("tw: Taiwanese (indigenous)"));
        variants.insert(String::from("saisiyat"), String::from("tw: Saisiyat (Taiwan)"));
        variants.insert(String::from("legacy"), String::from("tj: Tajik (legacy)"));
        variants.insert(String::from("tis"), String::from("th: Thai (TIS-820.2538)"));
        variants.insert(String::from("pat"), String::from("th: Thai (Pattachote)"));
        variants.insert(String::from("alt"), String::from("tm: Turkmen (Alt-Q)"));
        variants.insert(String::from("f"), String::from("tr: Turkish (F)"));
        variants.insert(String::from("e"), String::from("tr: Turkish (E)"));
        variants.insert(String::from("alt"), String::from("tr: Turkish (Alt-Q)"));
        variants.insert(String::from("intl"), String::from("tr: Turkish (intl., with dead keys)"));
        variants.insert(String::from("ku"), String::from("tr: Kurdish (Turkey, Latin Q)"));
        variants.insert(String::from("ku_f"), String::from("tr: Kurdish (Turkey, F)"));
        variants.insert(String::from("ku_alt"), String::from("tr: Kurdish (Turkey, Latin Alt-Q)"));
        variants.insert(String::from("phonetic"), String::from("ua: Ukrainian (phonetic)"));
        variants.insert(String::from("typewriter"), String::from("ua: Ukrainian (typewriter)"));
        variants.insert(String::from("winkeys"), String::from("ua: Ukrainian (Windows)"));
        variants.insert(String::from("macOS"), String::from("ua: Ukrainian (macOS)"));
        variants.insert(String::from("legacy"), String::from("ua: Ukrainian (legacy)"));
        variants.insert(String::from("homophonic"), String::from("ua: Ukrainian (homophonic)"));
        variants.insert(String::from("crh"), String::from("ua: Crimean Tatar (Turkish Q)"));
        variants.insert(String::from("crh_f"), String::from("ua: Crimean Tatar (Turkish F)"));
        variants.insert(String::from("crh_alt"), String::from("ua: Crimean Tatar (Turkish Alt-Q)"));
        variants.insert(String::from("urd-crulp"), String::from("pk: Urdu (Pakistan, CRULP)"));
        variants.insert(String::from("urd-nla"), String::from("pk: Urdu (Pakistan, NLA)"));
        variants.insert(String::from("ara"), String::from("pk: Arabic (Pakistan)"));
        variants.insert(String::from("snd"), String::from("pk: Sindhi"));
        variants.insert(String::from("latin"), String::from("uz: Uzbek (Latin)"));
        variants.insert(String::from("us"), String::from("vn: Vietnamese (US)"));
        variants.insert(String::from("fr"), String::from("vn: Vietnamese (France)"));

        vec![variants]
    }

    pub fn variant(key: &str) -> String
    {
        let variants = Self::variant_list();
        let mut value_variant = String::new();

        for variant in &variants {
            if let Some(&ref value) = variant.get(key) {
                value_variant = value.clone();
            }else {
                value_variant = String::from("Variant not identified");
            }
        }

        value_variant
    }

    pub fn variant_json() -> String
    {
        let variant: Vec<HashMap<String, String>> = Self::variant_list();
        serde_json::to_string_pretty(&variant).unwrap()
    }

    pub fn option_list() -> Vec<HashMap<String, String>>
    {
        let mut options = HashMap::new();

        options.insert(String::from("grp"), String::from("Switching to another layout"));
        options.insert(String::from("grp:switch"), String::from("Right Alt (while pressed)"));
        options.insert(String::from("grp:lswitch"), String::from("Left Alt (while pressed)"));
        options.insert(String::from("grp:lwin_switch"), String::from("Left Win (while pressed)"));
        options.insert(String::from("grp:rwin_switch"), String::from("Right Win (while pressed)"));
        options.insert(String::from("grp:win_switch"), String::from("Any Win (while pressed)"));
        options.insert(String::from("grp:menu_switch"), String::from("Menu (while pressed), Shift+Menu for Menu"));
        options.insert(String::from("grp:caps_switch"), String::from("Caps Lock (while pressed), Alt+Caps Lock for the original Caps Lock action"));
        options.insert(String::from("grp:rctrl_switch"), String::from("Right Ctrl (while pressed)"));
        options.insert(String::from("grp:toggle"), String::from("Right Alt"));
        options.insert(String::from("grp:lalt_toggle"), String::from("Left Alt"));
        options.insert(String::from("grp:caps_toggle"), String::from("Caps Lock"));
        options.insert(String::from("grp:shift_caps_toggle"), String::from("Shift+Caps Lock"));
        options.insert(String::from("grp:caps_select"), String::from("Caps Lock to first layout; Shift+Caps Lock to second layout"));
        options.insert(String::from("grp:win_menu_select"), String::from("Left Win to first layout; Right Win/Menu to second layout"));
        options.insert(String::from("grp:ctrl_select"), String::from("Left Ctrl to first layout; Right Ctrl to second layout"));
        options.insert(String::from("grp:alt_caps_toggle"), String::from("Alt+Caps Lock"));
        options.insert(String::from("grp:shifts_toggle"), String::from("Both Shifts together"));
        options.insert(String::from("grp:alts_toggle"), String::from("Both Alts together"));
        options.insert(String::from("grp:alt_altgr_toggle"), String::from("Both Alts together; AltGr alone chooses third level"));
        options.insert(String::from("grp:ctrls_toggle"), String::from("Both Ctrls together"));
        options.insert(String::from("grp:ctrl_shift_toggle"), String::from("Ctrl+Shift"));
        options.insert(String::from("grp:lctrl_lshift_toggle"), String::from("Left Ctrl+Left Shift"));
        options.insert(String::from("grp:rctrl_rshift_toggle"), String::from("Right Ctrl+Right Shift"));
        options.insert(String::from("grp:ctrl_shift_toggle_bidir"), String::from("Left Ctrl+Left Shift chooses previous layout, Right Ctrl + Right Shift chooses next layout"));
        options.insert(String::from("grp:ctrl_alt_toggle"), String::from("Alt+Ctrl"));
        options.insert(String::from("grp:lctrl_lalt_toggle"), String::from("Left Alt+Left Ctrl"));
        options.insert(String::from("grp:rctrl_ralt_toggle"), String::from("Right Alt+Right Ctrl"));
        options.insert(String::from("grp:ctrl_alt_toggle_bidir"), String::from("Left Ctrl+Left Alt chooses previous layout, Right Ctrl + Right Alt chooses next layout"));
        options.insert(String::from("grp:alt_shift_toggle"), String::from("Alt+Shift"));
        options.insert(String::from("grp:lalt_lshift_toggle"), String::from("Left Alt+Left Shift"));
        options.insert(String::from("grp:ralt_rshift_toggle"), String::from("Right Alt+Right Shift"));
        options.insert(String::from("grp:alt_shift_toggle_bidir"), String::from("Left Alt+Left Shift chooses previous layout, Right Alt + Right Shift chooses next layout"));
        options.insert(String::from("grp:menu_toggle"), String::from("Menu"));
        options.insert(String::from("grp:lwin_toggle"), String::from("Left Win"));
        options.insert(String::from("grp:alt_space_toggle"), String::from("Alt+Space"));
        options.insert(String::from("grp:win_space_toggle"), String::from("Win+Space"));
        options.insert(String::from("grp:ctrl_space_toggle"), String::from("Ctrl+Space"));
        options.insert(String::from("grp:rwin_toggle"), String::from("Right Win"));
        options.insert(String::from("grp:lshift_toggle"), String::from("Left Shift"));
        options.insert(String::from("grp:rshift_toggle"), String::from("Right Shift"));
        options.insert(String::from("grp:lctrl_toggle"), String::from("Left Ctrl"));
        options.insert(String::from("grp:rctrl_toggle"), String::from("Right Ctrl"));
        options.insert(String::from("grp:sclk_toggle"), String::from("Scroll Lock"));
        options.insert(String::from("grp:lctrl_lwin_rctrl_menu"), String::from("Ctrl+Left Win to first layout; Ctrl+Menu to second layout"));
        options.insert(String::from("grp:lctrl_lwin_toggle"), String::from("Left Ctrl+Left Win"));
        options.insert(String::from("lv2"), String::from("Key to choose the 2nd level"));
        options.insert(String::from("lv2:lsgt_switch"), String::from("The '< >' key"));
        options.insert(String::from("lv3"), String::from("Key to choose the 3rd level"));
        options.insert(String::from("lv3:switch"), String::from("Right Ctrl"));
        options.insert(String::from("lv3:menu_switch"), String::from("Menu"));
        options.insert(String::from("lv3:win_switch"), String::from("Any Win"));
        options.insert(String::from("lv3:lwin_switch"), String::from("Left Win"));
        options.insert(String::from("lv3:rwin_switch"), String::from("Right Win"));
        options.insert(String::from("lv3:alt_switch"), String::from("Any Alt"));
        options.insert(String::from("lv3:lalt_switch"), String::from("Left Alt"));
        options.insert(String::from("lv3:ralt_switch"), String::from("Right Alt"));
        options.insert(String::from("lv3:ralt_switch_multikey"), String::from("Right Alt; Shift+Right Alt as Compose"));
        options.insert(String::from("lv3:ralt_alt"), String::from("Right Alt never chooses 3rd level"));
        options.insert(String::from("lv3:enter_switch"), String::from("Enter on keypad"));
        options.insert(String::from("lv3:caps_switch"), String::from("Caps Lock"));
        options.insert(String::from("lv3:bksl_switch"), String::from("Backslash"));
        options.insert(String::from("lv3:lsgt_switch"), String::from("The '< >' key"));
        options.insert(String::from("lv3:caps_switch_latch"), String::from("Caps Lock; acts as onetime lock when pressed together with another 3rd-level chooser"));
        options.insert(String::from("lv3:bksl_switch_latch"), String::from("Backslash; acts as onetime lock when pressed together with another 3rd level chooser"));
        options.insert(String::from("lv3:lsgt_switch_latch"), String::from("The '< >' key; acts as onetime lock when pressed together with another 3rd level chooser"));
        options.insert(String::from("ctrl"), String::from("Ctrl position"));
        options.insert(String::from("ctrl:nocaps"), String::from("Caps Lock as Ctrl"));
        options.insert(String::from("ctrl:lctrl_meta"), String::from("Left Ctrl as Meta"));
        options.insert(String::from("ctrl:swapcaps"), String::from("Swap Ctrl and Caps Lock"));
        options.insert(String::from("ctrl:grouptoggle_capscontrol"), String::from("Caps Lock as Ctrl, Left Control switches to another layout"));
        options.insert(String::from("ctrl:hyper_capscontrol"), String::from("Caps Lock as Ctrl, Ctrl as Hyper"));
        options.insert(String::from("ctrl:ac_ctrl"), String::from("To the left of 'A'"));
        options.insert(String::from("ctrl:aa_ctrl"), String::from("At the bottom left"));
        options.insert(String::from("ctrl:rctrl_ralt"), String::from("Right Ctrl as Right Alt"));
        options.insert(String::from("ctrl:ralt_rctrl"), String::from("Right Alt as Right Control"));
        options.insert(String::from("ctrl:menu_rctrl"), String::from("Menu as Right Ctrl"));
        options.insert(String::from("ctrl:swap_lalt_lctl"), String::from("Swap Left Alt with Left Ctrl"));
        options.insert(String::from("ctrl:swap_ralt_rctl"), String::from("Swap Right Alt with Right Ctrl"));
        options.insert(String::from("ctrl:swap_lwin_lctl"), String::from("Swap Left Win with Left Ctrl"));
        options.insert(String::from("ctrl:swap_rwin_rctl"), String::from("Swap Right Win with Right Ctrl"));
        options.insert(String::from("ctrl:swap_lalt_lctl_lwin"), String::from("Left Alt as Ctrl, Left Ctrl as Win, Left Win as Left Alt"));
        options.insert(String::from("grp_led"), String::from("Use keyboard LED to show alternative layout"));
        options.insert(String::from("grp_led:num"), String::from("Num Lock"));
        options.insert(String::from("grp_led:caps"), String::from("Caps Lock"));
        options.insert(String::from("grp_led:scroll"), String::from("Scroll Lock"));
        options.insert(String::from("mod_led"), String::from("Use keyboard LED to indicate modifiers"));
        options.insert(String::from("mod_led:compose"), String::from("Compose"));
        options.insert(String::from("keypad"), String::from("Layout of numeric keypad"));
        options.insert(String::from("keypad:legacy"), String::from("Legacy"));
        options.insert(String::from("keypad:oss"), String::from("Unicode arrows and math operators"));
        options.insert(String::from("keypad:future"), String::from("Unicode arrows and math operators on default level"));
        options.insert(String::from("keypad:legacy_wang"), String::from("Legacy Wang 724"));
        options.insert(String::from("keypad:oss_wang"), String::from("Wang 724 keypad with Unicode arrows and math operators"));
        options.insert(String::from("keypad:future_wang"), String::from("Wang 724 keypad with Unicode arrows and math operators on default level"));
        options.insert(String::from("keypad:hex"), String::from("Hexadecimal"));
        options.insert(String::from("keypad:atm"), String::from("Phone and ATM style"));
        options.insert(String::from("kpdl"), String::from("Numeric keypad Delete behavior"));
        options.insert(String::from("kpdl:dot"), String::from("Legacy key with dot"));
        options.insert(String::from("kpdl:comma"), String::from("Legacy key with comma"));
        options.insert(String::from("kpdl:dotoss"), String::from("Four-level key with dot"));
        options.insert(String::from("kpdl:dotoss_latin9"), String::from("Four-level key with dot, Latin-9 only"));
        options.insert(String::from("kpdl:commaoss"), String::from("Four-level key with comma"));
        options.insert(String::from("kpdl:momayyezoss"), String::from("Four-level key with momayyez"));
        options.insert(String::from("kpdl:kposs"), String::from("Four-level key with abstract separators"));
        options.insert(String::from("kpdl:semi"), String::from("Semicolon on third level"));
        options.insert(String::from("caps"), String::from("Caps Lock behavior"));
        options.insert(String::from("caps:internal"), String::from("Caps Lock uses internal capitalization; Shift \"pauses\" Caps Lock"));
        options.insert(String::from("caps:internal_nocancel"), String::from("Caps Lock uses internal capitalization; Shift does not affect Caps Lock"));
        options.insert(String::from("caps:shift"), String::from("Caps Lock acts as Shift with locking; Shift \"pauses\" Caps Lock"));
        options.insert(String::from("caps:shift_nocancel"), String::from("Caps Lock acts as Shift with locking; Shift does not affect Caps Lock"));
        options.insert(String::from("caps:capslock"), String::from("Caps Lock toggles normal capitalization of alphabetic characters"));
        options.insert(String::from("caps:shiftlock"), String::from("Caps Lock toggles Shift Lock (affects all keys)"));
        options.insert(String::from("caps:swapescape"), String::from("Swap Esc and Caps Lock"));
        options.insert(String::from("caps:escape"), String::from("Make Caps Lock an additional Esc"));
        options.insert(String::from("caps:escape_shifted_capslock"), String::from("Make Caps Lock an additional Esc, but Shift + Caps Lock is the regular Caps Lock"));
        options.insert(String::from("caps:backspace"), String::from("Make Caps Lock an additional Backspace"));
        options.insert(String::from("caps:super"), String::from("Make Caps Lock an additional Super"));
        options.insert(String::from("caps:hyper"), String::from("Make Caps Lock an additional Hyper"));
        options.insert(String::from("caps:menu"), String::from("Make Caps Lock an additional Menu key"));
        options.insert(String::from("caps:numlock"), String::from("Make Caps Lock an additional Num Lock"));
        options.insert(String::from("caps:ctrl_modifier"), String::from("Make Caps Lock act as an additional Ctrl modifier, but keep identifying as Caps Lock"));
        options.insert(String::from("caps:digits_row"), String::from("Caps Lock gives digits on the digits row (Azerty layouts)"));
        options.insert(String::from("caps:none"), String::from("Caps Lock is disabled"));
        options.insert(String::from("altwin"), String::from("Alt and Win behavior"));
        options.insert(String::from("altwin:menu"), String::from("Add the standard behavior to Menu key"));
        options.insert(String::from("altwin:menu_win"), String::from("Menu is mapped to Win"));
        options.insert(String::from("altwin:meta_alt"), String::from("Alt and Meta are on Alt"));
        options.insert(String::from("altwin:alt_win"), String::from("Alt is mapped to Win and the usual Alt"));
        options.insert(String::from("altwin:ctrl_win"), String::from("Ctrl is mapped to Win and the usual Ctrl"));
        options.insert(String::from("altwin:ctrl_rwin"), String::from("Ctrl is mapped to Right Win and the usual Ctrl"));
        options.insert(String::from("altwin:ctrl_alt_win"), String::from("Ctrl is mapped to Alt, Alt to Win"));
        options.insert(String::from("altwin:meta_win"), String::from("Meta is mapped to Win"));
        options.insert(String::from("altwin:left_meta_win"), String::from("Meta is mapped to Left Win"));
        options.insert(String::from("altwin:hyper_win"), String::from("Hyper is mapped to Win"));
        options.insert(String::from("altwin:alt_super_win"), String::from("Alt is mapped to Right Win, Super to Menu"));
        options.insert(String::from("altwin:swap_lalt_lwin"), String::from("Left Alt is swapped with Left Win"));
        options.insert(String::from("altwin:swap_alt_win"), String::from("Alt is swapped with Win"));
        options.insert(String::from("altwin:prtsc_rwin"), String::from("Win is mapped to PrtSc and the usual Win"));
        options.insert(String::from("Compose key"), String::from("Position of Compose key"));
        options.insert(String::from("compose:ralt"), String::from("Right Alt"));
        options.insert(String::from("compose:lwin"), String::from("Left Win"));
        options.insert(String::from("compose:lwin-altgr"), String::from("3rd level of Left Win"));
        options.insert(String::from("compose:rwin"), String::from("Right Win"));
        options.insert(String::from("compose:rwin-altgr"), String::from("3rd level of Right Win"));
        options.insert(String::from("compose:menu"), String::from("Menu"));
        options.insert(String::from("compose:menu-altgr"), String::from("3rd level of Menu"));
        options.insert(String::from("compose:lctrl"), String::from("Left Ctrl"));
        options.insert(String::from("compose:lctrl-altgr"), String::from("3rd level of Left Ctrl"));
        options.insert(String::from("compose:rctrl"), String::from("Right Ctrl"));
        options.insert(String::from("compose:rctrl-altgr"), String::from("3rd level of Right Ctrl"));
        options.insert(String::from("compose:caps"), String::from("Caps Lock"));
        options.insert(String::from("compose:caps-altgr"), String::from("3rd level of Caps Lock"));
        options.insert(String::from("compose:102"), String::from("The '< >' key"));
        options.insert(String::from("compose:102-altgr"), String::from("3rd level of the '< >' key"));
        options.insert(String::from("compose:paus"), String::from("Pause"));
        options.insert(String::from("compose:ins"), String::from("Insert"));
        options.insert(String::from("compose:prsc"), String::from("PrtSc"));
        options.insert(String::from("compose:sclk"), String::from("Scroll Lock"));
        options.insert(String::from("compat"), String::from("Compatibility options"));
        options.insert(String::from("numpad:pc"), String::from("Default numeric keypad keys"));
        options.insert(String::from("numpad:mac"), String::from("Numeric keypad always enters digits (as in macOS)"));
        options.insert(String::from("numpad:microsoft"), String::from("Num Lock on: digits; Shift for arrows. Num Lock off: arrows (as in Windows)"));
        options.insert(String::from("numpad:shift3"), String::from("Shift does not cancel Num Lock, chooses 3rd level instead"));
        options.insert(String::from("scrolllock:mod3"), String::from("Map Scroll Lock to Mod3"));
        options.insert(String::from("srvrkeys:none"), String::from("Special keys (Ctrl+Alt+<key>) handled in a server"));
        options.insert(String::from("apple:alupckeys"), String::from("Apple Aluminium emulates Pause, PrtSc, Scroll Lock"));
        options.insert(String::from("apple:jp_oadg109a"), String::from("Japanese Apple keyboards emulate OADG109A backslash"));
        options.insert(String::from("apple:jp_pc106"), String::from("Japanese Apple keyboards emulate PC106 backslash"));
        options.insert(String::from("shift:breaks_caps"), String::from("Shift cancels Caps Lock"));
        options.insert(String::from("misc:typo"), String::from("Enable extra typographic characters"));
        options.insert(String::from("misc:apl"), String::from("Enable APL overlay characters"));
        options.insert(String::from("shift:both_capslock"), String::from("Both Shifts together enable Caps Lock"));
        options.insert(String::from("shift:both_capslock_cancel"), String::from("Both Shifts together enable Caps Lock; one Shift key disables it"));
        options.insert(String::from("shift:both_shiftlock"), String::from("Both Shifts together enable Shift Lock"));
        options.insert(String::from("keypad:pointerkeys"), String::from("Shift + Num Lock enables PointerKeys"));
        options.insert(String::from("grab:break_actions"), String::from("Allow breaking grabs with keyboard actions (warning: security risk)"));
        options.insert(String::from("grab:debug"), String::from("Allow grab and window tree logging"));
        options.insert(String::from("currencysign"), String::from("Currency signs"));
        options.insert(String::from("eurosign:e"), String::from("Euro on E, third level"));
        options.insert(String::from("eurosign:E"), String::from("Euro on E, fourth level"));
        options.insert(String::from("eurosign:2"), String::from("Euro on 2"));
        options.insert(String::from("eurosign:4"), String::from("Euro on 4"));
        options.insert(String::from("eurosign:5"), String::from("Euro on 5"));
        options.insert(String::from("rupeesign:4"), String::from("Rupee on 4"));
        options.insert(String::from("lv5"), String::from("Key to choose the 5th level"));
        options.insert(String::from("lv5:caps_switch"), String::from("Caps Lock chooses 5th level"));
        options.insert(String::from("lv5:lsgt_switch"), String::from("The '< >' key chooses 5th level"));
        options.insert(String::from("lv5:ralt_switch"), String::from("Right Alt chooses 5th level"));
        options.insert(String::from("lv5:menu_switch"), String::from("Menu chooses 5th level"));
        options.insert(String::from("lv5:rctrl_switch"), String::from("Right Ctrl chooses 5th level"));
        options.insert(String::from("lv5:lsgt_switch_lock"), String::from("The '< >' key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser"));
        options.insert(String::from("lv5:ralt_switch_lock"), String::from("Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser"));
        options.insert(String::from("lv5:lwin_switch_lock"), String::from("Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser"));
        options.insert(String::from("lv5:rwin_switch_lock"), String::from("Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser"));
        options.insert(String::from("nbsp"), String::from("Non-breaking space input"));
        options.insert(String::from("nbsp:none"), String::from("Usual space at any level"));
        options.insert(String::from("nbsp:level2"), String::from("Non-breaking space at the 2nd level"));
        options.insert(String::from("nbsp:level3"), String::from("Non-breaking space at the 3rd level"));
        options.insert(String::from("nbsp:level3n"), String::from("Non-breaking space at the 3rd level, thin non-breaking space at the 4th level"));
        options.insert(String::from("nbsp:level4"), String::from("Non-breaking space at the 4th level"));
        options.insert(String::from("nbsp:level4n"), String::from("Non-breaking space at the 4th level, thin non-breaking space at the 6th level"));
        options.insert(String::from("nbsp:level4nl"), String::from("Non-breaking space at the 4th level, thin non-breaking space at the 6th level (via Ctrl+Shift)"));
        options.insert(String::from("nbsp:zwnj2"), String::from("Zero-width non-joiner at the 2nd level"));
        options.insert(String::from("nbsp:zwnj2zwj3"), String::from("Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level"));
        options.insert(String::from("nbsp:zwnj2zwj3nb4"), String::from("Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level, non-breaking space at the 4th level"));
        options.insert(String::from("nbsp:zwnj2nb3"), String::from("Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level"));
        options.insert(String::from("nbsp:zwnj2nb3zwj4"), String::from("Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, zero-width joiner at the 4th level"));
        options.insert(String::from("nbsp:zwnj2nb3nnb4"), String::from("Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, thin non-breaking space at the 4th level"));
        options.insert(String::from("nbsp:zwnj3zwj4"), String::from("Zero-width non-joiner at the 3rd level, zero-width joiner at the 4th level"));
        options.insert(String::from("japan"), String::from("Japanese keyboard options"));
        options.insert(String::from("japan:kana_lock"), String::from("Kana Lock key is locking"));
        options.insert(String::from("japan:nicola_f_bs"), String::from("NICOLA-F style Backspace"));
        options.insert(String::from("japan:hztg_escape"), String::from("Make Zenkaku Hankaku an additional Esc"));
        options.insert(String::from("korean"), String::from("Korean Hangul/Hanja keys"));
        options.insert(String::from("korean:ralt_hangul"), String::from("Make right Alt a Hangul key"));
        options.insert(String::from("korean:rctrl_hangul"), String::from("Make right Ctrl a Hangul key"));
        options.insert(String::from("korean:ralt_hanja"), String::from("Make right Alt a Hanja key"));
        options.insert(String::from("korean:rctrl_hanja"), String::from("Make right Ctrl a Hanja key"));
        options.insert(String::from("esperanto"), String::from("Esperanto letters with superscripts"));
        options.insert(String::from("esperanto:qwerty"), String::from("At the corresponding key in a QWERTY layout"));
        options.insert(String::from("esperanto:dvorak"), String::from("At the corresponding key in a Dvorak layout"));
        options.insert(String::from("esperanto:colemak"), String::from("At the corresponding key in a Colemak layout"));
        options.insert(String::from("solaris"), String::from("Old Solaris keycodes compatibility"));
        options.insert(String::from("solaris:sun_compat"), String::from("Sun key compatibility"));
        options.insert(String::from("terminate"), String::from("Key sequence to kill the X server"));
        options.insert(String::from("terminate:ctrl_alt_bksp"), String::from("Ctrl+Alt+Backspace"));
        options.insert(String::from("custom"), String::from("Miscellaneous options"));
        options.insert(String::from("custom:types"), String::from("Use user-defined custom XKB types"));
    
        vec![options]
    }

    pub fn option(key: &str) -> String
    {
        let options = Self::option_list();
        let mut value_option = String::new();

        for option in &options {
            if let Some(&ref value) = option.get(key) {
                value_option = value.clone();
            }else {
                value_option = String::from("Variant not identified");
            }
        }

        value_option
    }

    pub fn option_json() -> String
    {
        let option: Vec<HashMap<String, String>> = Self::option_list();
        serde_json::to_string_pretty(&option).unwrap()
    }
}